doctype html
html
  head
    title Chat with #{user.id}
    link(rel="stylesheet" href="/css/styles.css")
    script(type='module' src='https://unpkg.com/emoji-picker-element@latest')
    style.
        #chat-messages {
            list-style-type: none; /* Removes bullet points */
            padding: 0; /* Removes default padding */
        }
      #chat-messages li {
        background-color: #f0f0f0; /* Light grey background */
        border-radius: 10px; /* Rounded corners */
        padding: 10px; /* Padding inside the container */
        margin-bottom: 5px; /* Space between messages */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow */
        word-wrap: break-word; /* Ensure long words do not overflow */
        max-width: 80%; /* Maximum width of message container */
      }
  body
    .sidebar
      h2 Navigation
      button.button(onclick="location.href='/one-on-one-chat'") One-on-One Chat
      button.button(onclick="location.href='/create-group'") Create Group
      button.button(onclick="location.href='/group-chat'") Group Chat

    .container
      h1 Chat with #{user.id}

      .chat-box
        ul#chat-messages
          // Chat messages will be dynamically populated here

      .emoji-picker-container
        button#emoji-button Emoji
        emoji-picker#emoji-picker(style='position: absolute; bottom: 20px; left: 20px; display: none;')

      form#chat-form(action="#" method="post")
        input(type="text" id="message-input" placeholder="Type a message")
        button(type="submit") Send

      button.button(onclick="location.href='/chat'") Back to Chat

      .bubble(style="width:100px; height:100px; left:10%; animation-duration:4s;")
      .bubble(style="width:60px; height:60px; left:20%; animation-duration:5s;")
      .bubble(style="width:120px; height:120px; left:70%; animation-duration:6s;")

    script(src="/socket.io/socket.io.js")
    script.
      document.addEventListener('DOMContentLoaded', function () {
        var socket = io();
        var userId = "#{user.id}";
        var senderUserId = "#{session.user.id}";

        socket.emit('registerUser', senderUserId);

        function displayMessage(sender, message) {
          var chatMessages = document.getElementById('chat-messages');
          var messageItem = document.createElement('li');
          messageItem.textContent = sender + ": " + message;
          chatMessages.appendChild(messageItem);
        }

        function fetchAndDisplayChatHistory() {
          fetch('/get-messages?senderId=' + senderUserId + '&receiverId=' + userId)
            .then(response => response.json())
            .then(messages => {
              messages.forEach(message => {
                displayMessage(message.sender === senderUserId ? 'You' : message.sender, message.message);
              });
            })
            .catch(error => console.error('Error fetching chat history:', error));
        }

        fetchAndDisplayChatHistory();

        var chatForm = document.getElementById('chat-form');
        var messageInput = document.getElementById('message-input');

        chatForm.addEventListener('submit', function (e) {
          e.preventDefault();
          var messageText = messageInput.value.trim();
          if (messageText) {
            socket.emit('chatMessage', { senderUserId, receiverUserId: userId, text: messageText });
            displayMessage('You', messageText);
            messageInput.value = '';
          }
        });

        socket.on('chatMessage', function (message) {
          if (message.sender === senderUserId || message.receiver === senderUserId) {
            displayMessage(message.sender === senderUserId ? 'You' : message.sender, message.message);
          }
        });

        document.querySelector('#emoji-button').addEventListener('click', function() {
          var emojiPicker = document.getElementById('emoji-picker');
          if (emojiPicker.style.display === 'none') {
            emojiPicker.style.display = 'block';
          } else {
            emojiPicker.style.display = 'none';
          }
        });

        document.querySelector('#emoji-picker').addEventListener('emoji-click', function(e) {
          messageInput.value += e.detail.emoji.unicode;
        });

        var typingTimer; // Timer identifier
        var doneTypingInterval = 1000; // Time in ms (1 second)

        // Detect keyup event on the message input
        messageInput.addEventListener('keyup', () => {
          clearTimeout(typingTimer);
          if (messageInput.value) {
            socket.emit('typing', { senderUserId, receiverUserId: userId });
            typingTimer = setTimeout(doneTyping, doneTypingInterval);
          }
        });

        // User is "finished" typing
        function doneTyping() {
          socket.emit('stopTyping', { senderUserId, receiverUserId: userId });
        }

        // To display typing status
        function showTypingStatus(userId, isTyping) {
          var typingIndicator = document.getElementById('typing-indicator');
          if (userId !== senderUserId && isTyping) {
            typingIndicator.textContent = userId + ' is typing...';
          } else {
            typingIndicator.textContent = ''; // Clear the indicator when the user stops typing
          }
        }

        socket.on('typing', function (userId) {
          showTypingStatus(userId, true);
        });

        socket.on('stopTyping', function (userId) {
          showTypingStatus(userId, false);
        });
      });
