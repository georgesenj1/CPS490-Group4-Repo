doctype html
html
  head
    title Chat Page
    link(rel="stylesheet" href="/css/styles.css")
    script(src="/socket.io/socket.io.js")
    script(src='https://unpkg.com/emoji-picker-element@latest' type='module')

  body
    .sidebar
      h2 Navigation
      button.button(onclick="location.href='/one-on-one-chat'") One-on-One Chat
      button.button(onclick="location.href='/create-group'") Create Group
      button.button(onclick="location.href='/group-chat'") Group Chat

    .container.main-box
      h1 Public Chat Page

      // Container for Public Messages
      .chat-box
        h2 Public Messages
        ul#public-chat-messages
          // Public messages will be populated here
        .emoji-picker-container
          button#emoji-button Emoji
          emoji-picker#emoji-picker(style='position: absolute; bottom: 20px; left: 20px; z-index: 1000; display: none;')

        form#public-chat-form(action="#" method="post")
          input(type="text" id="public-message-input" placeholder="Type a public message")
          button(type="submit") Send

      // Bubbles for aesthetics
      .bubble(style="width:100px; height:100px; left:10%; animation-duration:4s;")
      .bubble(style="width:60px; height:60px; left:20%; animation-duration:5s;")
      .bubble(style="width:120px; height:120px; left:70%; animation-duration:6s;")

    // Socket.io and Client-Side Logic
    script.
      document.getElementById('emoji-button').addEventListener('click', function() {
        var emojiPicker = document.getElementById('emoji-picker');
        if (emojiPicker.style.display === 'none') {
          emojiPicker.style.display = 'block';
        } else {
          emojiPicker.style.display = 'none';
        }
      });
      var socket = io(); 
      var userId = !{JSON.stringify(userId)};

      // Fetch and display public chat history
      function fetchAndDisplayPublicChatHistory() {
        fetch('/get-public-messages')
          .then(response => response.json())
          .then(messages => {
            messages.forEach(message => {
              displayPublicMessage(message.sender, message.message);
            });
          })
          .catch(error => console.error('Error fetching messages:', error));
      }

      // Handling Public Chat Form Submission
      document.getElementById('public-chat-form').addEventListener('submit', function (e) {
        e.preventDefault();
        var messageText = document.getElementById('public-message-input').value.trim();
        if (messageText) {
          socket.emit('publicChatMessage', { senderUserId: userId, text: messageText });
          document.getElementById('public-message-input').value = '';
        }
      });

      // Displaying Public Chat Messages
      socket.on('publicChatMessage', function (message) {
        displayPublicMessage(message.sender, message.message);
      });

      function displayPublicMessage(sender, message) {
        var publicChatMessages = document.getElementById('public-chat-messages');
        var messageItem = document.createElement('li');
        messageItem.textContent = sender + ": " + message;
        publicChatMessages.appendChild(messageItem);
      }

      // Emoji Picker Event Listener
      var emojiPicker = document.getElementById('emoji-picker');
      emojiPicker.addEventListener('emoji-click', event => {
        var chatInput = document.getElementById('public-message-input');
        chatInput.value += event.detail.emoji.unicode; // Append the selected emoji to the chat input
      });

      // Fetch chat history when the page loads
      fetchAndDisplayPublicChatHistory();
